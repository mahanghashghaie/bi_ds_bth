-- This script:
--    CREATES/recreates the Dimensions: Time, Location, & Location
--    CREATES/recreates the Fact table(s) // under construction
--    POPULATES the tables with data


-- You have to:
--    get the files from our github repository (DiseaseDim.csv & LocationDim.csv)
--    replace <file_path> in the import statements with your path to the files
--    run the script in/from exasol console


-- TIME Dimension

drop table if exists BI_TASKS.dates;
create table BI_TASKS.dates
(
  sqldate integer
);

IMPORT INTO BI_TASKS.dates
FROM LOCAL CSV FILE 'C:/Users/rupal/Google Drive/Beuth Uni/BI/bi_ds_bth/dates.csv'
ENCODING = 'UTF-8'
ROW SEPARATOR = 'LF'
COLUMN SEPARATOR = ','
COLUMN DELIMITER = '"'
SKIP = 1
REJECT LIMIT 0;

drop table if exists BI_TASKS.Time_Dim;
create table BI_TASKS.Time_Dim as
(
  select date_id, SQLDATE, date_,
         year(date_) as year_,
         month(date_) as month_,
         day(date_) as day_,
         week(date_) as week_,
         hour(date_) as hour_,
         minute(date_) as minute_,
         second(date_) as second_
  from (
          select row_number() over (order by SQLDATE) as date_id, SQLDATE, cast(substr(SQLDATE, 1, 4) || '-' || substr(SQLDATE, 5, 2) || '-' || substr(SQLDATE, 7, 2) as date) as date_
          from BI_TASKS.DATES
      ) aa
);
alter table BI_TASKS.Time_Dim add constraint primary key (date_id);

drop table BI_TASKS.dates;


-- DISEASE Dimension

drop table if exists BI_TASKS.DISEASE_DIM;
create table BI_TASKS.Disease_Dim
(
  disease_ID integer primary key ,
  disease_category nvarchar(200),
  disease_sub_category nvarchar(200),
  disease_type nvarchar(200),
  disease nvarchar(200)
);

IMPORT INTO BI_TASKS.DISEASE_DIM
FROM LOCAL CSV FILE 'C:/Users/rupal/Google Drive/Beuth Uni/BI/bi_ds_bth/DiseaseDim.csv'
ENCODING = 'UTF-8'
ROW SEPARATOR = 'CRLF'
COLUMN SEPARATOR = ','
COLUMN DELIMITER = '"'
SKIP = 1
REJECT LIMIT 0;


-- LOCATION Dimension

-- foreign key references need to be dropped first
drop table if exists BI_TASKS.location_dim_ext;
drop table if exists BI_TASKS.country_region;

drop table if exists BI_TASKS.location_dim;
create table BI_TASKS.location_dim
(
  country_code nvarchar(10) primary key,
  name nvarchar(200)
);

IMPORT INTO BI_TASKS.location_dim
FROM LOCAL CSV FILE 'C:/Users/rupal/Google Drive/Beuth Uni/BI/bi_ds_bth/country_code.csv'
ENCODING = 'UTF-8'
ROW SEPARATOR = 'LF'
COLUMN SEPARATOR = ','
COLUMN DELIMITER = '"'
SKIP = 1
REJECT LIMIT 0;


drop table if exists BI_TASKS.country_code_iso3;
create table BI_TASKS.country_code_iso3
(
  country_code nvarchar(10) primary key,
  country_code_iso3 nvarchar(10),
  name nvarchar(200)
);

IMPORT INTO BI_TASKS.country_code_iso3
FROM LOCAL CSV FILE 'C:/Users/rupal/Google Drive/Beuth Uni/BI/bi_ds_bth/country_code_iso3.csv'
ENCODING = 'UTF-8'
ROW SEPARATOR = 'LF'
COLUMN SEPARATOR = ','
COLUMN DELIMITER = '"'
SKIP = 1
REJECT LIMIT 0;


drop table if exists BI_TASKS.country_region;
create table BI_TASKS.country_region
(
  country_code nvarchar(10),
  constraint country_code foreign key (country_code) references BI_TASKS.location_dim(country_code),
  region_code nvarchar(10),
  region_name nvarchar(200),
  region_type nvarchar(200)
);

IMPORT INTO BI_TASKS.country_region
FROM LOCAL CSV FILE 'C:/Users/rupal/Google Drive/Beuth Uni/BI/bi_ds_bth/country_region.csv'
ENCODING = 'UTF-8'
ROW SEPARATOR = 'LF'
COLUMN SEPARATOR = ','
COLUMN DELIMITER = '"'
SKIP = 1
REJECT LIMIT 0;


drop table if exists BI_TASKS.location_dim_ext;
create table BI_TASKS.location_dim_ext as
  (
    select code.COUNTRY_CODE, COUNTRY_CODE_ISO3, code.NAME, REGION_CODE, REGION_NAME, REGION_TYPE
    from BI_TASKS.location_dim code
           inner join BI_TASKS.country_code_iso3 iso3
             on code.country_code = iso3.country_code
           left join BI_TASKS.country_region region
             on code.country_code = region.COUNTRY_CODE
  );
alter table BI_TASKS.location_dim_ext add constraint foreign key (COUNTRY_CODE) references BI_TASKS.location_dim(COUNTRY_CODE);

drop table BI_TASKS.country_code_iso3;
drop table BI_TASKS.country_region;







-- facts
-- foreign keys:
--    time dim: ID
--    location dim: country_code
--    disease dim: disease_id
